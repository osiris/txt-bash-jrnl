#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2017 Osiris Alejandro Gomez <osiux@osiux.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

DEFAULT_JRNL_DIR="$HOME/.jrnl"
DEFAULT_JRNL_LOCAL_DIR="$PWD/.jrnl"
DEFAULT_JRNL_ANSI=1
DEFAULT_JRNL_PAGER='cat'
DEFAULT_JRNL_EDITOR='vim'
DEFAULT_JRNL_VIM_OPTIONS=" -c 'set titlestring=jrnl' -c 'set nopaste' -c 'set et' -c '$' -c 'normal A' -c 'startinsert' -c 'put .'"
DEFAULT_JRNL_EMACS_OPTIONS=''
DEFAULT_JRNL_BEGIN='8'
DEFAULT_JRNL_END='20'

[[ -z "$JRNL_ANSI" ]] && JRNL_ANSI="$DEFAULT_JRNL_ANSI"
[[ -z "$JRNL_PAGER" ]] && JRNL_PAGER="$DEFAULT_JRNL_PAGER"
[[ -z "$JRNL_EDITOR" ]] && JRNL_EDITOR="$DEFAULT_JRNL_EDITOR"
[[ -z "$JRNL_VIM_OPTIONS" ]] && JRNL_VIM_OPTIONS="$DEFAULT_JRNL_VIM_OPTIONS"
[[ -z "$JRNL_EMACS_OPTIONS" ]] && JRNL_EMACS_OPTIONS="$DEFAULT_JRNL_EMACS_OPTIONS"

JEXT='txt'

set_ansi_colors ()
{
# by https://github.com/mathiasbynens/dotfiles
if tput setaf 1 &> /dev/null
then
  NORMAL=$(tput sgr0);
  BRIGHT=$(tput bold);
  BLUE=$(tput setaf 33);
  GREEN=$(tput setaf 46);
  RED=$(tput setaf 196);
  WHITE=$(tput setaf 231);
  YELLOW=$(tput setaf 11);
  LIME=$(tput setaf 82);
else
  NORMAL="\e[0m";
  BRIGHT="\e[1m";
  BLUE="\e[1;34m";
  GREEN="\e[1;32m";
  RED="\e[1;31m";
  WHITE="\e[1;37m";
  YELLOW="\e[1;33m";
  LIME="\e[1;82m]"
fi;
}

die ()
{
  printf "%s" "$RED[ERROR] $1 $NORMAL" && exit 1
}

success ()
{
  printf "%s" "$GREEN[OK] $1 $NORMAL" && exit 0
}

debug ()
{
  [[ ! -z "$JRNL_DEBUG" ]] && printf "%s\\n" "[DEBUG] $1" >&2
}

yesno ()
{
  [[ -t 0 ]] || return 0
  local RESPONSE
  read -r -p "${YELLOW}$1 [y/N] ? " RESPONSE
  [[ "$RESPONSE" == [yY] ]] || success "bye!"
}

hours ()
{
  local h
  [[ -z "$1" ]] && die
  ((h=${1}/3600))
  printf "%02d" $h
}

minutes ()
{
  local m
  [[ -z "$1" ]] && die
  ((m=(${1}%3600)/60))
  printf "%02d" $m
}

get_hash ()
{
  local FILE
  local HASH

  [[ ! -z "$1" ]] && FILE="$1"
  HASH=$(head -1 "$FILE" | cut -c -16 | sha256sum | cut -c -6)
  echo "$HASH"
}

jrnl_mkdir ()
{
  yesno "create $JRNL_DIR" && mkdir "$JRNL_DIR"
}

jrnl_regenerate_index()
{
  cd "$JRNL_DIR" || die 'regenerate_index'

  echo "jrnl_regenerate_index in $CACHE_HASH ..."

  find -type f -regex ".*/[0-9]+\.${JEXT}" \
    | cut -c 3-                            \
    | while read -r i
      do
        echo $(head -1 "$i" | cut -c -16 | sha256sum | cut -c -6) "$i"
      done > "$CACHE_HASH"
}

jrnl_find_file_by_index ()
{
  local DIR
  local HASH
  local FILE

  [[ -z "$1" ]] && exit 1
  HASH="$1"

  # FIXME first find today, yesterday, week, month
  DIR=$(echo "$JRNL_DIR/$JRNL_TODAY" | rev | cut -d / -f2- | rev)

  [[ ! -z "$2" ]] && DIR="$2"

  find "$DIR" -follow -type f -iname "*.$JEXT" | while read -r FILE
  do
    SHA=$(get_hash "$FILE")

    if [[ "$SHA" = "$HASH" ]]
    then
      echo "$FILE"
      exit 0
    fi
  done
}

jrnl_get_file_by_cache_hash ()
{
  local FILE

  [[ -z "$1" ]] && exit 1
  HASH="$1"

  FILE=$(grep -w "$HASH" "$CACHE_HASH" | awk '{print $2}' | tail -1)

  [[ -e "$JRNL_DIR/$FILE" ]] && echo "$JRNL_DIR/$FILE"
}

jrnl_get_file_by_index ()
{
  local FILE

  [[ -z "$1" ]] && exit 1
  HASH="$1"

  FILE=$(jrnl_get_file_by_cache_hash "$HASH")

  if [[ ! -z "$FILE" ]]
  then
    echo "$FILE"
    exit 0
  fi

  FILE=$(jrnl_find_file_by_index "$HASH")

  if [[ -z "$FILE" ]]
  then
    FILE=$(jrnl_find_file_by_index "$HASH" "$JRNL_DIR")
  fi

  echo "$FILE"
}

jrnl_get_last_file ()
{
  local DIR
  local FILE

  if [[ ! -z "$1" ]]
  then
    DIR="$1"
  else
    DIR="$JRNL_DIR"
  fi

  [[ ! -d "$DIR" ]] && die "[get_last_file] not found directory: $DIR"

  F=$(find "$DIR" -follow -type f -iname "*.$JEXT" | sort -nr | sed 's/^.\///g' | head -1)

  [[ -z "$F" ]] && die "[get_last_file] not found last file in: $DIR"

  echo "$F"
}

jrnl_edit ()
{
  local DIR
  local FILE
  local F

  if [[ -z "$1" ]]
  then
    DIR="$JRNL_DIR/$JRNL_TODAY"
    FILE=$(jrnl_get_last_file "$DIR")
  else
    FILE=$(jrnl_get_file_by_index "$1")
  fi

  [[ ! -e "$FILE" ]] && die "[edit] not found file: $FILE"

  if [[ "$JRNL_EDITOR" = 'vim' ]]
  then
    #FIXME JRNL_EDITOR_OPTIONS="$JRNL_VIM_OPTIONS"
    vim -c 'set titlestring=jrnl' -c 'set nopaste' -c 'set et' -c '$' -c 'normal A' -c 'startinsert' -c 'put .' "$FILE"
  fi

  if [[ "$JRNL_EDITOR" = 'emacs' ]]
  then
    #FIXME JRNL_EDITOR_OPTIONS="$JRNL_EMACS_OPTIONS"
    emacs "$FILE"
  fi

  success "$FILE"
}

jrnl_short_help ()
{
cat << EOF

Usage: $(basename "$0") [action] [hash]

  # jrnl                    Create a journal
  # jrnl 1                  View the last journals
  # jrnl 5                  View the last five journals

Actions:

  a|all [PATTERN]           List all journals, optionally filter by
                            PATTERN or REGEX

  c|copy [HASH]             Copy journal by HASH

  d|diff HASH1 [HASH2]      View differences between journals

  -h|--help                 Show short or full help

  l|ls|today                List today journals

  m|month [PATTERN]         List last month journals, optionally filter
                            by PATTERN or REGEX

  rm|remove|del|delete HASH Delete a journal specified by hash or by
                            default the last journal

  t|time [HH:MM]            Set specified time in HH:MM format or by
                            default with difference between current time
                            and header timestamp of journal

  -v|--version              Show version and credits

  v|view [HASH]             View a journal specified by hash or by
                            default the last journal

  w|week [PATTERN]          List last week journals, optionally filter
                            by PATTERN or REGEX

  x|fix                     Set filename of journal with timestamp of
                            journal header

  y|yesterday               List yesterday journals

  Y|year                    List last year journals

EOF
}

jrnl_full_help ()
{
cat << EOF

Usage: $(basename "$0") [action] [hash]

Create a journal:

  # jrnl

View the last N journals:

  # jrnl 1
  # jrnl 5

Actions:

  a|all [PATTERN]

    List all journals, optionally filter by PATTERN or REGEX

    # jrnl a
    # jrnl a 2017
    # jrnl a github
    # jrnl a "#[0-9]+"

  c|copy [HASH]

    Copy journal by HASH

    # jrnl c ha4s5h

  d|diff HASH1 [HASH2]

    View differences between journals.
    By default HASH2 is the last journal

    # jrnl d ha4sh1 ha4sh2
    # jrnl d ha4sh1

  e|edit [HASH]

    Edit last journal or specified journal

    # jrnl e
    # jrnl e ha4s5h

  -h|--help

    Show short or full help

    # jrnl -h
    # jrnl --help

  l|ls|today

    List today journals

    # jrnl l

  rm|remove|del|delete HASH

    Delete a journal specified by hash or by default the last journal

    # jrnl d ha4s5h

  t|time [HH:MM]

    Set specified time in HH:MM format or by default with difference
    between current time and header timestamp of journal

    # jrnl t 00:25
    # jrnl t

  -v|--version

    Show version and credits

  v|view [HASH]

    View a journal specified by hash or by default the last journal

    # jrnl v ha4s5h

  x|fix

    Set filename of journal with timestamp of journal header

    # jrnl x

  y|yesterday

    List yesterday journals

    # jrnl y

  w|week

    List last week journals

    # jrnl w

  m|month

    List last month journals

    # jrnl m

  Y|year

    List last year journals

    # jrnl Y
EOF
}

jrnl_add ()
{
  local DIR
  local FILE
  local DATA

  if [[ -z "$2" ]]
  then
    if [[ -z "$1" ]]
    then
      die '[add] nothing to do, empty text'
    else
      DIR="$JRNL_DIR/$JRNL_TODAY"
      FILE=$(jrnl_get_last_file "$DIR")
      DATA="$1"
    fi
  else
    FILE=$(jrnl_get_file_by_index "$1")
    DATA="$2"
  fi

  [[ ! -e "$FILE" ]] && die "[add] not found file: $FILE"

  printf "\n%s" "$DATA" >> "$FILE"
}

jrnl_copy ()
{
  local DIR
  local FILE
  local F
  local OLD_FILE
  local NEW_FILE

  if [[ -z "$1" ]]
  then
    DIR="$JRNL_DIR/$JRNL_TODAY"
    OLD_FILE=$(jrnl_get_last_file "$DIR")
  else
    OLD_FILE=$(jrnl_get_file_by_index "$1")
  fi

  [[ ! -e "$OLD_FILE" ]] && die "[copy] not found file: $OLD_FILE"

  TITLE=$(head -1 "$OLD_FILE" | cut -c 16-)

  NEW_FILE="$JRNL_DIR/$JRNL_TODAY/$JRNL_FILE"

  jrnl_set_header_file "$NEW_FILE" "$TITLE"
  tail -n +2 "$OLD_FILE" >> "$NEW_FILE"

  vim -c 'set et' -c '$' -c 'normal A' -c 'startinsert' -c 'put .' "$NEW_FILE"
}

jrnl_version ()
{
cat << EOF

  jrnl

  A simple command line journal application that stores your journal
  in a plain text file, developed in bash and inspired in jrnl.sh
  http://jrnl.sh

  Author: Osiris Alejandro GÃ³mez https://www.osiux.com/,
  worker cooperative of gcoop Cooperativa de Software Libre
  https://www.gcoop.coop/

  License: GPL, https://www.gnu.org/copyleft/gpl.html
  Code: https://github.com/osiris/txt-bash-jrnl

EOF
}

jrnl_file ()
{
  local DIR
  local FILE
  local F

  if [[ -z "$1" ]]
  then
    DIR="$JRNL_DIR/$JRNL_TODAY"
    FILE=$(jrnl_get_last_file "$DIR")
  else
    FILE=$(jrnl_get_file_by_index "$1")
  fi

  [[ ! -e "$FILE" ]] && die "[file] not found file: $FILE"

  echo "$FILE"
}

jrnl_view ()
{
  local DIR
  local FILE

  if [[ -z "$1" ]]
  then
    DIR="$JRNL_DIR/$JRNL_TODAY"
    FILE=$(jrnl_get_last_file "$DIR")
  else
    FILE=$(jrnl_get_file_by_index "$1")
  fi

  [[ ! -e "$FILE" ]] && die "[view] not found file: $FILE"

  $JRNL_PAGER "$FILE"
}

jrnl_set_start ()
{
  local DIR
  local FILE
  local F
  local T
  #local D

  if [[ -z "$1" ]]
  then
    DIR="$JRNL_DIR/$JRNL_TODAY"
    FILE=$(jrnl_get_last_file "$DIR")
  else
    FILE=$(jrnl_get_file_by_index "$1")
  fi

  [[ ! -e "$FILE" ]] && die "[set_start] not found file: $FILE"

  #D=$(jrnl_get_head_date "$FILE")

  if [[ -z "$2" ]]
  then
    T="$NOW"
  else
    T="$2"
    VALID_TIME=$(echo "$T" | egrep -o "[0-9]{2}:[0-9]{2}")
    [[ "$VALID_TIME" != "$T" ]] && die "[set_start] invalid time: $T"
  fi

  echo "FIXME jrnl_set_head_time" "$T" "$FILE"
  success "[set_start] set time: $T in file: $FILE"
}

jrnl_set_time ()
{
  local DIR
  local FILE
  local F
  local T

  VALID_TIME=$(echo "$1" | egrep -o "[0-9]{2}:[0-9]{2}")
  VALID_HASH=$(echo "$1" | egrep -o "[a-f0-9]{6}")

  if [[ "$1" = "$VALID_TIME" ]]
  then

    if [[ -z "$2" ]]
    then
      DIR="$JRNL_DIR/$JRNL_TODAY"
      FILE=$(jrnl_get_last_file "$DIR")
    fi

  else

    if [[ "$1" = "$VALID_TIME" ]]
    then
      FILE=$(jrnl_get_file_by_index "$1")
    fi

    #if [[ "$1" = "$VALID_HASH" ]]
    #then
    #  FILE=$(jrnl_get_file_by_index "$1")
    # die
    #fi

  fi

  # FIXME
  # $1 = 00:25 + $2 = null : get last file
  # $1 = abcde + $2 = 00:25
  if [[ -z "$1" ]]
  then
    DIR="$JRNL_DIR/$JRNL_TODAY"
    FILE=$(jrnl_get_last_file "$DIR")
  else
    FILE=$(jrnl_get_file_by_index "$1")
  fi

  [[ ! -e "$FILE" ]] && die "[set_time] not found file: $FILE"

  T=$(jrnl_get_foot_time "$FILE")

  [[ "$T" != "00:00" ]] && die "[set_time] already time: $T"

  if [[ -z "$2" ]]
  then
    T=$(jrnltimediff "$FILE" | awk '{print $2}')
  else
    T="$2"
    VALID_TIME=$(echo "$T" | egrep -o "[0-9]{2}:[0-9]{2}")
    [[ "$VALID_TIME" != "$T" ]] && die "[set_Time] invalid time: $T"
  fi

  printf "\n  @ %s hs\n" "$T" >> "$FILE"
  success "[set_time] set time: $T in file: $FILE"
}

jrnl_delete ()
{
  local DIR
  local FILE
  local F

  if [[ -z "$1" ]]
  then
    DIR="$JRNL_DIR/$JRNL_TODAY"
    FILE=$(jrnl_get_last_file "$DIR")
  else
    FILE=$(jrnl_get_file_by_index "$1")
  fi

  [[ ! -e "$FILE" ]] && die "[delete] not found file: $FILE"

  head -1 "$FILE"
  rm -i "$FILE"
}

jrnl_diff ()
{
  local DIR
  local FILE_A
  local FILE_B
  local F

  if [[ -z "$1" ]]
  then
    DIR="$JRNL_DIR/$JRNL_TODAY"
    FILE_A=$(jrnl_get_last_file "$DIR")
  else
    FILE_A=$(jrnl_get_file_by_index "$1")
  fi

  if [[ -z "$2" ]]
  then
    DIR="$JRNL_DIR/$JRNL_TODAY"
    FILE_A=$(jrnl_get_last_file "$DIR")
    FILE_B=$(jrnl_get_file_by_index "$1")
  else
    FILE_B=$(jrnl_get_file_by_index "$2")
  fi

  [[ ! -e "$FILE_A" ]] && die "[diff] not found file: $FILE_A"
  [[ ! -e "$FILE_B" ]] && die "[diff] not found file: $FILE_B"

  vimdiff "$FILE_A" "$FILE_B"
}

jrnl_get_head_timestamp ()
{
  local HEAD_TIMESTAMP

  [[ -z "$1" ]] && die "[get_head_timestamp] empty file"

  HEAD_TIMESTAMP=$(head -1 "$1" | cut -c -16)
  [[ -z "$HEAD_TIMESTAMP" ]] && die "[get_head_timestamp] empty timestamp in $1"

  echo "$HEAD_TIMESTAMP"
}

jrnl_get_head_date ()
{
  local HEAD_DATE

  [[ -z "$1" ]] && die "[get_head_date] empty file"

  HEAD_DATE=$(head -1 "$1" | cut -c -11)
  [[ -z "$HEAD_DATE" ]] && HEAD_DATE='1970-01-01'

  echo "$HEAD_DATE"
}

jrnl_get_head_time ()
{
  local HEAD_TIME

  [[ -z "$1" ]] && die "[get_head_time] empty file"

  HEAD_TIME=$(head -1 "$1" | cut -c 12-16)
  [[ ! "$HEAD_TIME" = *":"* ]] && HEAD_TIME='00:00'
  [[ -z "$HEAD_TIME" ]] && HEAD_TIME="00:00"

  echo "$HEAD_TIME"
}

jrnl_get_foot_time ()
{
  local FOOT_TIME

  [[ -z "$1" ]] && die "[get_foot_time] empty file"

  FOOT_TIME=$(tail -1 "$1" | egrep -o "^  @ [0-9]{2}:[0-9]{2} hs$" | egrep -o "[0-9:]+")
  [[ -z "$FOOT_TIME" ]] && FOOT_TIME="00:00"

  echo "$FOOT_TIME"
}

jrnl_last_week ()
{
  local DIR
  local DATE
  local D
  local M
  local n
  local t

  [[ -z "$3" ]] && n=1
  t=$((6*n))

  for D in $(seq "$t" -1 0)
  do
    DATE=$(date --date="-$D days" +%Y-%m-%d)
    M=$(echo "$DATE"| cut -d '-' -f2)
    DIR="$JRNL_DIR/$YEAR/$YEAR-$M/$DATE"

    [[ ! -d "$DIR" ]] && continue
    jrnl_list "$DIR" "$2"
  done
}

jrnl_last_month ()
{
  local D
  local DATE
  local DIR
  local M
  local n
  local t

  [[ -z "$3" ]] && n=1
  t=$((30*n))

  for D in $(seq "$t" -1 0)
  do
    DATE=$(date --date="-$D days" +%Y-%m-%d)
    M=$(echo "$DATE"| cut -d '-' -f2)
    DIR="$JRNL_DIR/$YEAR/$YEAR-$M/$DATE"

    [[ ! -d "$DIR" ]] && continue
    jrnl_list "$DIR" "$2"
  done
}

jrnl_last_year ()
{
  local D
  local DATE
  local DIR
  local M
  local Y
  local n
  local t

  [[ -z "$3" ]] && n=1
  t=$((365*n))

  for D in $(seq "$t" -1 0)
  do
    DATE=$(date --date="-$D days" +%Y-%m-%d)
    Y=$(echo "$DATE"| cut -d '-' -f1)
    M=$(echo "$DATE"| cut -d '-' -f2)
    DIR="$JRNL_DIR/$Y/$Y-$M/$DATE"

    [[ ! -d "$DIR" ]] && continue
    jrnl_list "$DIR" "$2"
  done
}

jrnl_list ()
{
  local REGEXP
  local LIST_DIR
  local BARDAY

  REGEXP=''
  BARDAY=''

  [[ -z "$JRNL_DONT_SHOW_TIME" ]] && JRNL_SHOW_TIME=1
  [[ -z "$JRNL_DONT_SHOW_DETAIL" ]] && JRNL_SHOW_DETAIL=1
  BEGIN="$DEFAULT_JRNL_BEGIN"
  END="$DEFAULT_JRNL_END"
  [[ ! -z "$JRNL_BEGIN" ]] && BEGIN="$JRNL_BEGIN"
  [[ ! -z "$JRNL_END"   ]] && END="$JRNL_END"

  [[ -z "$1" ]] && die
  [[ ! -z "$2" ]] && REGEXP="$2"

  LIST_DIR="$1"
  LIST=$(mktemp)
  DAYS=$(mktemp)
  LIST_DAY=$(mktemp)

  [[ ! -d "$LIST_DIR" ]] && die "[list] not found directory: $1"

  printf "%s" "$NORMAL"

  TOTAL_FOOT_SECONDS=0
  TOTAL_FOOT_MINUTES=0

  cd "$LIST_DIR" && find -follow -type f -name "*.$JEXT" \
    | cut -c 3-                                          \
    | sort                                               \
    | while read -r f
    do
      FOOT_TIME=$(jrnl_get_foot_time "$f")
      FOOT_SECONDS=$(date -u '+%s' -d "1970-01-01 $FOOT_TIME")
      FOOT_MINUTES=0
      FOOT_MINUTES=$(echo "$FOOT_SECONDS" | awk '{printf "%0d",$1/60}')
      TOTAL_FOOT_MINUTES=$(( TOTAL_FOOT_MINUTES + FOOT_MINUTES ))
      printf "%3s %s\n" "$FOOT_MINUTES" "$f"
    done > "$LIST"

    BARDAY=$(mktemp)

    EPOC_MIN=$(date -u '+%s' -d '1970-01-01 23:59')
    EPOC_MAX=$(date -u '+%s' -d '1970-01-01 00:00')

    while read -r m f
    do
      FILE="$f"

      if [[ ! -z "$REGEXP" ]]
      then
        egrep "$REGEXP" "$FILE" >/dev/null || continue
      fi

      FOOT_TIME=$(jrnl_get_foot_time "$FILE")
      C_FOOT_TIME="${YELLOW}${FOOT_TIME}${NORMAL}"

      HEAD=$(head -1 "$FILE")
      HEAD_TIME=$(jrnl_get_head_time "$FILE")
      HEAD_DATE=$(jrnl_get_head_date "$FILE")
      C_HEAD_TIME="${GREEN}${HEAD_TIME}${NORMAL}"

      MAX_COLS=$(tput cols);
      COLS=$(( MAX_COLS - 20 ))

      if [[ $JRNL_SHOW_DETAIL -eq 1 ]]
      then

      if [[ "$JRNL_ANSI" -eq 0 ]]
      then

        HEAD_TITLE=$(echo "$HEAD" \
         | cut -c 18-$COLS        \
         | sed -e 's/ :(/ ð/g'   \
        )

      else

      HEAD_TITLE=$(echo "$HEAD" \
        | cut -c 18-$COLS       \
        | sed -e "s/ \`\`\([a-z._\-]\+\)\`\`/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \`\([a-zA-Z.\-]\+\)\`/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ @\([a-z.\-]\+\)@/ ${BRIGHT}${RED}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ =\([a-z.\-]\+\)=/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/#\([0-9]\+\) /${BRIGHT}${BLUE}#\1${NORMAL}${YELLOW} /g" \
        | sed -e "s/ \*\([a-z.\-]\+\)\*/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \*\([a-z0-9.\s\-]\+\)\* / ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \(+[a-z_\-]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \(\/[a-z0-9\.\/\-]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \(@[a-z]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/\(@[A-Za-z0-9\.\-]\+\)/${BRIGHT}${LIME}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \([0-9\-]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \([a-z0-9\-]\+\.[a-z0-9]\+\.[a-z0-9]\+\.[a-z]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \([a-z0-9\-]\+\.[a-z0-9]\+\.[a-z]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \([a-z0-9\-]\+\.[a-z0-9]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \([a-z0-9\-\.]\+@[a-z0-9\.\-]\+\.[a-z0-9]\+\.[a-z]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \([a-z0-9\-\.]\+@[a-z0-9\-]\+\.[a-z]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ \([a-z]\+\-[a-z]\+\-[a-z0-9]\+\)/ ${BRIGHT}\1${NORMAL}${YELLOW}/g" \
        | sed -e "s/ MX /${BRIGHT} MX ${NORMAL}${YELLOW}/g"       \
        | sed -e "s/ CSV /${BRIGHT} MX ${NORMAL}${YELLOW}/g"      \
        | sed -e "s/ NS /${BRIGHT} NS ${NORMAL}${YELLOW}/g"       \
        | sed -e "s/ PTR /${BRIGHT} PTR ${NORMAL}${YELLOW}/g"     \
        | sed -e "s/ TXT /${BRIGHT} TXT ${NORMAL}${YELLOW}/g"     \
        | sed -e "s/ CNAME /${BRIGHT} CNAME ${NORMAL}${YELLOW}/g" \
        | sed -e "s/ A /${BRIGHT} A ${NORMAL}${YELLOW}/g"         \
        | sed -e "s/â/${BRIGHT}â${NORMAL}${YELLOW}/g" \
        | sed -e "s/â/${BRIGHT}â${NORMAL}${YELLOW}/g" \
        | sed -e "s/â/${BRIGHT}â${NORMAL}${YELLOW}/g" \
        | sed -e "s/â/${BRIGHT}â${NORMAL}${YELLOW}/g" \
        | sed -e "s/â/${BRIGHT}â${NORMAL}${YELLOW}/g" \
        | sed -e "s/â/${BRIGHT}â${NORMAL}${YELLOW}/g" \
        | sed -e "s/â/${BRIGHT}â${NORMAL}${YELLOW}/g" \
        | sed -e "s/â/${BRIGHT}â${NORMAL}${YELLOW}/g" \
        | sed -e "s/â/${BRIGHT}â${NORMAL}${YELLOW}/g" \
        | sed -e 's/ :(/ ð/g'
      )

      fi

      fi

      TITLE="${HEAD_TITLE}${NORMAL}"

      [[ "${#HEAD_TITLE}" -gt "$COLS" ]] && TITLE="${TITLE}..."

      HEAD_SECONDS=$(date -u '+%s' -d "1970-01-01 $HEAD_TIME" )
      FOOT_SECONDS=$(date -u '+%s' -d "1970-01-01 $FOOT_TIME" )
      TOTAL_FOOT_SECONDS=$(( TOTAL_FOOT_SECONDS + FOOT_SECONDS ))
      END_EPOC=$(( HEAD_SECONDS + FOOT_SECONDS ))

      END_TIME=$(date -u '+%H:%M' -d "@$END_EPOC" )
      C_END_TIME="${RED}${END_TIME}${NORMAL}"

      HASH=$(get_hash "$FILE")
      # FIXME FULL PATH FILENAMEecho "$HASH $FILE" >> "$CACHE_HASH"
      BARS=$(hour-timeline "$HEAD_TIME" "$END_TIME" | sed 's/â£ /â£\n/g')
      BAR=$(echo "$BARS" | head -1 | awk '{print $2}')
      echo "$BARS" >> "$BARDAY"

      [[ "$HEAD_SECONDS" -lt "$EPOC_MIN" ]] && EPOC_MIN="$HEAD_SECONDS"
      [[ "$END_EPOC"  -gt "$EPOC_MAX" ]] && EPOC_MAX="$END_EPOC"

      if [[ $JRNL_SHOW_DETAIL -eq 1 ]]
      then
        if [[ $JRNL_SHOW_TIME -eq 1 ]]
        then
          printf "%6s %-10s %5s %5s %5s %s\n" "$HASH" "$BAR" "$C_FOOT_TIME" "$C_HEAD_TIME" "$C_END_TIME" "$TITLE"
        else
          printf "%6s %-10s %5s %5s %5s %s\n" "$HASH" "$TITLE"
        fi
      fi

    done < "$LIST"

    TIMELINE=$(day-timeline "$BARDAY" "$BEGIN" "$END")

    if [[ "$TOTAL_FOOT_SECONDS" -gt 0 ]]
    then
      [[ $JRNL_SHOW_DETAIL -eq 1 ]] && echo
      TOTAL_END_TIME=$(date -u '+%H:%M' -d "@$TOTAL_FOOT_SECONDS" )
      MAX_TIME=$(date -u '+%H:%M' -d "@$EPOC_MAX")
      MIN_TIME=$(date -u '+%H:%M' -d "@$EPOC_MIN")
      printf "%14s%5s %5s %5s %s\n" \
        "$HEAD_DATE" "$TOTAL_END_TIME" "$MIN_TIME" "$MAX_TIME" "$TIMELINE"
      [[ $JRNL_SHOW_DETAIL -eq 1 ]] && echo
    fi

  rm -f "$LIST"
  rm -f "$DAYS"
  rm -f "$LIST_DAY"
}

jrnl_set_header_file ()
{
  local FILE
  local TITLE

  [[ -z "$1" ]] && die "[new] empty filename"

  TITLE=''
  FILE="$1"

  [[ ! -z "$2" ]] && TITLE="$2"
  [[ ! -e "$FILE" ]] && echo "$TIMESTAMP $TITLE" > "$FILE"
}

jrnl_new ()
{
  local FILE
  local TEXT

  [[ -z "$1" ]] && die "[new] empty filename"
  FILE="$1"

  mkdir -p "$DIR"

  # set duration time to last journal
  LAST_FILE=$(jrnl_get_last_file "$DIR")
  if [[ -e "$LAST_FILE" ]]
  then
    LAST_FOOT_TIME=$(jrnl_get_foot_time "$LAST_FILE")
    if [[ ! -z "$LAST_FOOT_TIME" ]]
    then
      LAST_FOOT_SECONDS=$(date -u '+%s' -d "1970-01-01 $LAST_FOOT_TIME")
      if [[ "$LAST_FOOT_SECONDS" -eq 0 ]]
      then
        LAST_TIME=$(jrnltimediff "$LAST_FILE")
        printf "\n  %s\n" "$LAST_TIME" >> "$LAST_FILE"
      fi
    fi
  fi

  if [[ -z "$2" ]]
  then
    jrnl_set_header_file "$FILE"
    vim -c 'set et' -c '$' -c 'normal A' -c 'startinsert' -c 'put .' "$FILE"
  else
    TEXT=$(echo "$2" | sed 's/^n //g' | sed 's/^new //g')
    echo "$TIMESTAMP $TEXT" > "$FILE"
  fi

  echo "$(get_hash "$FILE") $JRNL_TODAY/$JRNL_FILE" >> "$CACHE_HASH"
  success "$FILE"
}

jrnl_get_dates ()
{
  local TMP

  TMP=$(mktemp)
  date '+%Y %m %d %H %M %S' > "$TMP"

  while read -r YY mm dd HH MM SS
  do
    YEAR="$YY"
    TODAY="$YY-$mm-$dd"
    NOW="$HH:$MM"
    MONTH="$mm"
    JRNL_FILE="${HH}${MM}${SS}.$JEXT"
    TIMESTAMP="$TODAY $NOW"
    JRNL_TODAY="$YEAR/$YEAR-$MONTH/$TODAY"
    JRNL_MONTH="$YEAR/$YEAR-$MONTH"
  done < "$TMP"

  date --date="yesterday" '+%Y %m %d' > "$TMP"

  while read -r YY mm dd
  do
    YESTERDAY="$YY-$mm-$dd"
    JRNL_YESTERDAY="$YY/$YY-$mm/$YESTERDAY"
  done < "$TMP"

  rm -f "$TMP"
}

jrnl_issue_last_files ()
{
  local F
  local N
  local T
  local TMP

  TMP=$(mktemp)
  N=$(echo "$1" | egrep -o "[0-9]+")
  [[ -z "$N" ]] && N=10

  find "$JRNL_DIR/$YEAR" -follow -type f -iname "*.$JEXT" \
    | sort -nr                                            \
    | head -"$N"                                          \
    | while read -r F
  do
    T=$(jrnl_get_head_timestamp "$F")
    echo "$T $F"
  done | sort -nr > "$TMP"

  while read -r _ _ F
  do
    head -1 "$F" | egrep -o "\#[0-9]+"
  done < "$TMP"

  rm -f "$TMP"
}

jrnl_head_last_files ()
{
  local F
  local N
  local T
  local TMP

  TMP=$(mktemp)
  N=$(echo "$1" | egrep -o "[0-9]+")
  [[ -z "$N" ]] && N=10

  find "$JRNL_DIR/$YEAR" -follow -type f -iname "*.$JEXT" \
    | sort -nr                                            \
    | head -"$N"                                          \
    | while read -r F
  do
    T=$(jrnl_get_head_timestamp "$F")
    echo "$T $F"
  done | sort -nr > "$TMP"

  while read -r _ _ F
  do
    head -1 "$F"
  done < "$TMP"

  rm -f "$TMP"
}

jrnl_view_last_files ()
{
  local F
  local N
  local T
  local TMP

  TMP=$(mktemp)
  N=$(echo "$1" | egrep -o "[0-9]+")
  [[ -z "$N" ]] && N=10

  find "$JRNL_DIR/$YEAR" -follow -type f -iname "*.$JEXT" \
    | sort -nr                                            \
    | head -"$N"                                          \
    | while read -r F
  do
    T=$(jrnl_get_head_timestamp "$F")
    echo "$T $F"
  done | sort -nr > "$TMP"

  while read -r _ _ F
  do
    cat "$F"
    printf "\n"
  done < "$TMP"

  rm -f "$TMP"
}

jrnl_get_last_foot_time()
{
  local HEAD_TIME
  local FOOT_TIME
  local FILE

  FILE="$(jrnl_file)"
  HEAD_TIME="$(jrnl_get_head_time $FILE)"
  FOOT_TIME="$(jrnl_get_foot_time $FILE)"
  debug "[${FUNCNAME[0]}] file: $FILE head: $HEAD_TIME foot: $FOOT_TIME"
  [[ "$FOOT_TIME" = '00:00' ]] && FOOT_TIME="$(timediff "$HEAD_TIME" "$NOW")"
  echo "$FOOT_TIME"
  debug "[${FUNCNAME[0]}] return: $FOOT_TIME"
}

[[ "$JRNL_ANSI" -eq 1 ]] && set_ansi_colors

if [[ -z "$JRNL_DIR" ]]
then

  if [[ ! -d "$DEFAULT_JRNL_LOCAL_DIR" ]]
  then
    JRNL_DIR="$DEFAULT_JRNL_DIR"
  else
    JRNL_DIR="$DEFAULT_JRNL_LOCAL_DIR"
  fi

fi

[[ ! -d "$JRNL_DIR" ]] && jrnl_mkdir

jrnl_get_dates

DIR="$JRNL_DIR/$JRNL_TODAY"
[[ ! -d "$DIR" ]] && mkdir -p "$DIR"

CACHE_HASH="$JRNL_DIR/.cache_hash"
TMP_INPUT='NONE'

if [[ ! -t 0 ]]
then
  TMP_INPUT=$(mktemp)

  > "$TMP_INPUT"

  while IFS= read -r PIPED_INPUT
  do
    echo "$PIPED_INPUT" >> "$TMP_INPUT"
  done

fi

if [[ "$TMP_INPUT" = "NONE" ]]
then
  [[ -z "$1" ]] && jrnl_new "$DIR/$JRNL_FILE"
else
  case "$1" in
    new)
      # FIXME validate header
      echo "$2"
      exit
      # empty timestamp = $DIR/$JRNL_FILE
      # non empty timestamp = generate FILE from timestamp

      [[ ! -e "$DIR/$JRNL_FILE" ]] && mv -f "$TMP_INPUT" "$DIR/$JRNL_FILE"
      success "$DIR/$JRNL_FILE"
      ;;
  esac
fi

case "$1" in
  a|all)
    jrnl_list "$JRNL_DIR" "$2"
    ;;
  add)
    jrnl_add "$2" "$3"
    ;;
  c|copy)
    jrnl_copy "$2"
    ;;
  d|diff)
    jrnl_diff "$2" "$3"
    ;;
  e|edit)
    jrnl_edit "$2"
    ;;
  f|file)
    jrnl_file "$2"
    ;;
  -h)
    jrnl_short_help
    ;;
  --help)
    jrnl_full_help
    ;;
  l|ls|today)
    jrnl_list "$DIR" "$2"
    ;;
  m|month)
    jrnl_last_month "$JRNL_DIR" "$2" "$3"
    ;;
  n|new)
    echo "$@"
    jrnl_new "$DIR/$JRNL_FILE" "$*"
    ;;
  rm|remove|del|delete)
    jrnl_delete "$2"
    ;;
  s|start)
    jrnl_set_start "$2"
    ;;
  t|time)
    jrnl_set_time "$2" "$3"
    ;;
  v|view)
    jrnl_view "$2"
    ;;
  -v|--version)
    jrnl_version
    ;;
  w|week)
    jrnl_last_week "$JRNL_DIR" "$2"
    ;;
  x|fix)
    jrnltimestampfix "$JRNL_DIR"
    ;;
  y|yesterday)
    DIR="$JRNL_DIR/$JRNL_YESTERDAY"
    jrnl_list "$DIR" "$2"
    ;;
  Y|year)
    jrnl_last_year "$JRNL_DIR" "$2"
    ;;
  h|head)
    N=1
    [[ ! -z "$N" ]] && N=$(echo "$2" | egrep -o "[0-9]+")
    jrnl_head_last_files "$N"
    ;;
  i|issue)
    N=1
    [[ ! -z "$N" ]] && N=$(echo "$2" | egrep -o "[0-9]+")
    jrnl_issue_last_files "$N"
    ;;
  T|foot-time)
    jrnl_get_last_foot_time
    exit
    ;;
  X|index)
   jrnl_regenerate_index
   exit
   ;;
  *)
    N=$(echo "$1" | egrep -o "[0-9]+")

    if [[ ! -z "$N" ]]
    then
      jrnl_view_last_files "$N"
    else
      die "unknown action: $1"
    fi
esac
